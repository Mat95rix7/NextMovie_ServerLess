1-Firebase Authentification-------------------------------------------------------------



// Comme Vite n'a pas de système d'API routes intégré comme Next.js,
// vous devrez utiliser l'une des options suivantes :
// 1. Firebase Functions (recommandé)
// 2. Une API distincte (Express.js sur un service comme Vercel Serverless)
// 3. Utilisation de Firebase directement depuis le client avec des règles de sécurité strictes

// === OPTION 1: FIREBASE FUNCTIONS ===

// /functions/index.js (configuré pour Firebase Functions)
const functions = require('firebase-functions');
const admin = require('firebase-admin');
const cors = require('cors')({origin: true});

admin.initializeApp();

// Middleware d'authentification
const verifyAuthToken = async (req) => {
  if (!req.headers.authorization) {
    return null;
  }

  const token = req.headers.authorization.split(' ')[1];
  try {
    const decodedToken = await admin.auth().verifyIdToken(token);
    return decodedToken;
  } catch (error) {
    console.error('Error verifying auth token:', error);
    return null;
  }
};

// Fonction pour récupérer les données utilisateur
exports.getUserData = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    if (req.method !== 'GET') {
      return res.status(405).json({ error: 'Method not allowed' });
    }

    const user = await verifyAuthToken(req);
    if (!user) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    try {
      const userRecord = await admin.auth().getUser(user.uid);
      
      // Récupérer les données utilisateur personnalisées de Firestore
      const userDoc = await admin.firestore().collection('users').doc(user.uid).get();
      const userData = userDoc.exists ? userDoc.data() : {};
      
      return res.status(200).json({
        uid: userRecord.uid,
        email: userRecord.email,
        displayName: userRecord.displayName,
        photoURL: userRecord.photoURL,
        ...userData
      });
    } catch (error) {
      console.error('Error fetching user data:', error);
      return res.status(500).json({ error: 'Failed to fetch user data' });
    }
  });
});

exports.registerUser = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    if (req.method !== 'POST') {
      return res.status(405).json({ error: 'Method not allowed' });
    }

    const { email, password, displayName } = req.body;

    try {
      // Créer l'utilisateur dans Firebase Auth
      const userRecord = await admin.auth().createUser({
        email,
        password,
        displayName
      });

      // Créer un document utilisateur dans Firestore
      await admin.firestore().collection('users').doc(userRecord.uid).set({
        email,
        displayName,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        preferences: {},
        role: 'user'
      });

      return res.status(201).json({ 
        message: 'User created successfully',
        uid: userRecord.uid 
      });
    } catch (error) {
      console.error('Error creating new user:', error);
      return res.status(400).json({ error: error.message });
    }
  });
});

exports.updateProfile = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    if (req.method !== 'PUT') {
      return res.status(405).json({ error: 'Method not allowed' });
    }

    const user = await verifyAuthToken(req);
    if (!user) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    const { displayName, photoURL, ...customData } = req.body;

    try {
      // Mettre à jour l'utilisateur dans Firebase Auth
      const updateAuthData = {};
      if (displayName) updateAuthData.displayName = displayName;
      if (photoURL) updateAuthData.photoURL = photoURL;
      
      if (Object.keys(updateAuthData).length > 0) {
        await admin.auth().updateUser(user.uid, updateAuthData);
      }

      // Mettre à jour les données personnalisées dans Firestore
      if (Object.keys(customData).length > 0) {
        await admin.firestore().collection('users').doc(user.uid).update({
          ...customData,
          updatedAt: admin.firestore.FieldValue.serverTimestamp()
        });
      }

      return res.status(200).json({ message: 'Profile updated successfully' });
    } catch (error) {
      console.error('Error updating user profile:', error);
      return res.status(500).json({ error: error.message });
    }
  });
});

// === OPTION 2: CONFIGURATION CÔTÉ CLIENT ===

// /src/lib/firebase.js - Configuration Firebase pour le client
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';
import { getFunctions, httpsCallable } from 'firebase/functions';

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const functions = getFunctions(app);

export { app, auth, db, functions };
export const functionCall = (name) => httpsCallable(functions, name);




2-Implementation dans mon front :-------------------------------------------------




// /src/contexts/AuthContext.jsx
import React, { createContext, useState, useEffect, useContext } from 'react';
import { 
  signInWithEmailAndPassword, 
  createUserWithEmailAndPassword,
  signOut as firebaseSignOut,
  onAuthStateChanged
} from 'firebase/auth';
import { doc, setDoc, getDoc, serverTimestamp } from 'firebase/firestore';
import { auth, db, functionCall } from '../lib/firebase';

const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
      if (firebaseUser) {
        try {
          // Option 1: Utiliser Firebase Functions
          const getUserData = functionCall('getUserData');
          const { data } = await getUserData();
          setUser(data);
          
          // Option 2: Alternative - Récupérer depuis Firestore directement
          /*
          const userDocRef = doc(db, 'users', firebaseUser.uid);
          const userDoc = await getDoc(userDocRef);
          
          if (userDoc.exists()) {
            setUser({
              uid: firebaseUser.uid,
              email: firebaseUser.email,
              displayName: firebaseUser.displayName,
              photoURL: firebaseUser.photoURL,
              ...userDoc.data()
            });
          } else {
            // Nouvel utilisateur, créer un profil par défaut
            setUser({
              uid: firebaseUser.uid,
              email: firebaseUser.email,
              displayName: firebaseUser.displayName,
              photoURL: firebaseUser.photoURL
            });
          }
          */
        } catch (error) {
          console.error('Error fetching user data:', error);
          // Fallback aux données de base
          setUser({
            uid: firebaseUser.uid,
            email: firebaseUser.email,
            displayName: firebaseUser.displayName,
            photoURL: firebaseUser.photoURL
          });
        }
      } else {
        setUser(null);
      }
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  // Fonction d'inscription
  const register = async (email, password, displayName) => {
    try {
      // Créer l'utilisateur dans Firebase Auth
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      
      // Option 1: Utiliser Firebase Functions
      const registerUser = functionCall('registerUser');
      await registerUser({ email, displayName });
      
      // Option 2: Alternative - Créer directement dans Firestore
      /*
      const userDocRef = doc(db, 'users', userCredential.user.uid);
      await setDoc(userDocRef, {
        email,
        displayName,
        createdAt: serverTimestamp(),
        preferences: {},
        role: 'user'
      });
      */
      
      return userCredential.user;
    } catch (error) {
      console.error('Registration error:', error);
      throw error;
    }
  };

  // Fonction de connexion
  const login = async (email, password) => {
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      return userCredential.user;
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    }
  };

  // Fonction de déconnexion
  const logout = async () => {
    await firebaseSignOut(auth);
    setUser(null);
  };

  // Fonction de mise à jour du profil
  const updateProfile = async (data) => {
    try {
      // Option 1: Utiliser Firebase Functions
      const updateProfileFn = functionCall('updateProfile');
      await updateProfileFn(data);
      
      // Option 2: Alternative - Mettre à jour directement dans Firestore
      /*
      const userDocRef = doc(db, 'users', user.uid);
      await updateDoc(userDocRef, {
        ...data,
        updatedAt: serverTimestamp()
      });
      */
      
      // Mettre à jour l'état utilisateur local
      setUser(prev => ({ ...prev, ...data }));
      
      return true;
    } catch (error) {
      console.error('Update profile error:', error);
      throw error;
    }
  };

  const value = {
    user,
    loading,
    register,
    login,
    logout,
    updateProfile
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export const useAuth = () => useContext(AuthContext);




3---Exemple de formulaire de connexion------------------------------------------------------------


// /src/components/auth/LoginForm.jsx
import React, { useState } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';

export default function LoginForm() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);
    
    try {
      await login(email, password);
      navigate('/dashboard'); // Rediriger vers le tableau de bord après connexion
    } catch (error) {
      setError(
        error.code === 'auth/user-not-found' 
          ? 'Aucun utilisateur trouvé avec cet email' 
          : error.code === 'auth/wrong-password'
            ? 'Mot de passe incorrect'
            : 'Une erreur est survenue lors de la connexion'
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg">
      <h2 className="text-2xl font-bold text-center mb-6 text-amber-600">Connexion</h2>
      
      <form onSubmit={handleSubmit} className="space-y-4">
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            {error}
          </div>
        )}
        
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700">
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
          />
        </div>
        
        <div>
          <label htmlFor="password" className="block text-sm font-medium text-gray-700">
            Mot de passe
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
          />
        </div>
        
        <button
          type="submit"
          disabled={loading}
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-amber-600 hover:bg-amber-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500"
        >
          {loading ? 'Connexion...' : 'Se connecter'}
        </button>
      </form>
      
      <div className="mt-4 text-center">
        <p className="text-sm text-gray-600">
          Pas encore de compte ?{' '}
          <a 
            href="/register" 
            className="font-medium text-amber-600 hover:text-amber-500"
            onClick={(e) => {
              e.preventDefault();
              navigate('/register');
            }}
          >
            S'inscrire
          </a>
        </p>
      </div>
    </div>
  );
}


4- point cle de firebase------------------------------------------------------------


Je vais vous présenter les points clés pour intégrer Firebase Authentication dans une application React/Vite.

Voici les éléments essentiels à prendre en compte :

1. **Configuration initiale**
   - Créer un projet Firebase dans la console Firebase
   - Installer les dépendances nécessaires : `firebase` et éventuellement `react-firebase-hooks`
   - Configurer les variables d'environnement pour les clés API Firebase

2. **Structure du projet**
   - Créer un contexte d'authentification pour gérer l'état de connexion
   - Implémenter des composants de protection des routes
   - Organiser les services Firebase dans des fichiers séparés

3. **Implémentation de l'authentification**
   - Configurer les méthodes d'authentification (email/mot de passe, Google, Facebook, etc.)
   - Créer des composants pour l'inscription, la connexion et la déconnexion
   - Gérer les états de chargement et les erreurs

4. **Gestion des utilisateurs**
   - Stocker les informations utilisateur dans Firestore ou Realtime Database
   - Mettre à jour les profils utilisateurs
   - Gérer les autorisations et les rôles

5. **Sécurité**
   - Configurer les règles de sécurité Firebase
   - Implémenter la validation des entrées utilisateur
   - Gérer les tokens d'authentification et les sessions

Souhaitez-vous approfondir l'un de ces aspects en particulier, ou voulez-vous un exemple de code pour l'implémentation de base ?